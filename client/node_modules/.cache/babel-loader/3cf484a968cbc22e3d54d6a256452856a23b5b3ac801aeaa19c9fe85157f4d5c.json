{"ast":null,"code":"var _jsxFileName = \"/Users/nekoro/Desktop/CSE316/GitHub/Reddit-Replica/client/src/components/phreddit.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Banner } from './banner.js';\nimport { NavBar } from './nav.js';\nimport { HomePageView } from './homePageView.js';\nimport { SearchPageView } from './searchPageView.js';\nimport { CommunityPageView } from './communityPageView.js';\nimport { PostPageView } from './postPageView.js';\nimport { CreatePostPageView } from './createPostPageView.js';\nimport { CreateCommunityPageView } from './createCommunityPageView.js';\nimport { CreateCommentPageView } from './createCommentPageView.js';\nimport { arrayOfPostCommentsTime } from \"../helperFunctions.js\";\nimport { PhredditContext, UserContext } from \"./context\";\nimport { LoginPageView } from './loginPageView.js';\nimport { RegisterPageView } from './registerPageView.js';\nimport { WelcomePageView } from './welcomePageView.js';\nimport { UserProfilePageView } from './userProfilePageView.js';\nimport { EditComment } from './editComment.js';\nimport { EditCommunity } from './editCommunity.js';\nimport { EditPost } from './editPost.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchData(setPosts, setCommunities, setComments, setLinkFlairs, setUsers) {\n  try {\n    const [postsRes, communitiesRes, commentsRes, flairsRes, usersRes] = await Promise.all([axios.get(\"http://127.0.0.1:8000/get/posts\"), axios.get(\"http://127.0.0.1:8000/get/communities\"), axios.get(\"http://127.0.0.1:8000/get/comments\"), axios.get(\"http://127.0.0.1:8000/get/linkflairs\"), axios.get(\"http://127.0.0.1:8000/get/users\")]);\n    setPosts(postsRes.data);\n    setCommunities(communitiesRes.data);\n    setComments(commentsRes.data);\n    setLinkFlairs(flairsRes.data);\n    setUsers(usersRes.data);\n  } catch (err) {\n    console.error(\"One or more fetches failed:\", err);\n  }\n}\nexport default function Phreddit() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [postIDs, setPostIDs] = useState([]);\n  const [newestPosts, setNewestPosts] = useState([]);\n  const [oldestPosts, setOldestPosts] = useState([]);\n  const [activePosts, setActivePosts] = useState([]);\n  const [linkFlairs, setLinkFlairs] = useState([]);\n  const [linkFlairIDs, setLinkFlairIDs] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [commentIDs, setCommentIDs] = useState([]);\n  const [refreshTrigger, setRefreshTrigger] = useState(false);\n  const [login, setLogin] = useState(false);\n  const [editPost, setEditPost] = useState(null);\n  const [editComment, setEditComment] = useState(null);\n  const [editCommunity, setEditCommunity] = useState(null);\n  const [editUser, setEditUser] = useState(false);\n  const [listing, setListing] = useState('post');\n  const [storeAdmin, setStoreAdmin] = useState(null);\n\n  // Functions to switch pages\n  const [currentPage, setCurrentPage] = useState('welcome-page'); // Default page\n  const handleShowHomePage = () => setCurrentPage('home');\n  const handleShowCreateCommunityPage = () => setCurrentPage('create-community');\n  const handleShowCreatePostPage = () => setCurrentPage('create-post');\n  const handleShowPostPage = () => setCurrentPage('post');\n  const handleShowCommunityPage = () => setCurrentPage('community');\n  const handleShowCreateCommentPage = () => setCurrentPage('create-comment');\n  const handleShowSearchPage = () => setCurrentPage('search');\n  const handleShowWelcomePage = () => setCurrentPage('welcome-page');\n  const handleShowLoginPage = () => setCurrentPage('login-page');\n  const handleShowRegisterPage = () => setCurrentPage('register-page');\n  const handleShowUserProfilePage = () => setCurrentPage('user-profile');\n  const handleShowEditCommentPage = () => setCurrentPage('edit-comment');\n  const handleShowEditPostPage = () => setCurrentPage('edit-post');\n  const handleShowEditCommunityPage = () => setCurrentPage('edit-community');\n\n  // Post States\n  const [post, setPost] = useState(null);\n  const showPost = async post => {\n    if (!post) return;\n    post.views++;\n    // console.log(post);\n    await axios.post(\"http://127.0.0.1:8000/updateViews\", {\n      views: post.views,\n      postID: post._id\n    });\n    setPost({\n      ...post\n    });\n    handleShowPostPage();\n  };\n\n  // Community States\n  const [community, setCommunity] = useState(null);\n  const showCommunityPage = community => {\n    if (!community) return;\n    setCommunity({\n      ...community\n    });\n    handleShowCommunityPage();\n  };\n\n  // Comment States\n  const [comment, setComment] = useState(null);\n  const showCreateCommentPage = (comment, post) => {\n    if (!comment) return;\n    setPost({\n      ...post\n    });\n    setComment({\n      ...comment\n    });\n    handleShowCreateCommentPage();\n  };\n\n  // Search State\n  const [searchArray, setSearchArray] = useState([]);\n  const [searchValue, setSearchValue] = useState('');\n  const showSearchPage = (searchArray, input) => {\n    setSearchArray(searchArray);\n    setSearchValue(input);\n    handleShowSearchPage();\n  };\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    fetchData(setPosts, setCommunities, setComments, setLinkFlairs, setUsers);\n  }, [refreshTrigger, currentPage]);\n  useEffect(() => {\n    // Only run this once data is fetched\n    if (posts.length && comments.length && linkFlairs.length && communities.length) {\n      console.log(\"posts:\", posts);\n      console.log(\"communities:\", communities);\n      console.log(\"linkFlairs:\", linkFlairs);\n      console.log(\"comments:\", comments);\n      setPostIDs(posts.map(post => post._id));\n      setNewestPosts([...posts].sort((a, b) => new Date(b.postedDate) - new Date(a.postedDate)));\n      setOldestPosts([...posts].sort((a, b) => new Date(a.postedDate) - new Date(b.postedDate)));\n      setLinkFlairIDs(linkFlairs.map(flair => flair._id));\n      setCommentIDs(comments.map(comment => comment._id));\n      const activePostsSorted = [...posts].sort((a, b) => {\n        let postComments1 = arrayOfPostCommentsTime(a, comments, comments.map(c => c.commentID || c._id));\n        let newestComment1 = Math.max(...postComments1, 0);\n        let postComments2 = arrayOfPostCommentsTime(b, comments, comments.map(c => c.commentID || c._id));\n        let newestComment2 = Math.max(...postComments2, 0);\n        return newestComment2 - newestComment1;\n      });\n      setActivePosts(activePostsSorted);\n    }\n  }, [posts, comments, linkFlairs, communities]);\n  return /*#__PURE__*/_jsxDEV(PhredditContext.Provider, {\n    value: {\n      postState: {\n        posts,\n        setPosts,\n        postIDs,\n        newestPosts,\n        oldestPosts,\n        activePosts,\n        post,\n        setPost,\n        setActivePosts,\n        setOldestPosts,\n        setNewestPosts,\n        setPostIDs\n      },\n      commentState: {\n        comments,\n        setComments,\n        commentIDs,\n        comment,\n        setComment,\n        setCommentIDs\n      },\n      communityState: {\n        communities,\n        setCommunities,\n        community,\n        setCommunity\n      },\n      flairState: {\n        linkFlairs,\n        linkFlairIDs,\n        setLinkFlairs,\n        setLinkFlairIDs\n      },\n      showPageFunctions: {\n        currentPage,\n        setCurrentPage,\n        handleShowHomePage,\n        handleShowCreateCommunityPage,\n        handleShowCreatePostPage,\n        handleShowPostPage,\n        showPost,\n        showCreateCommentPage,\n        showCommunityPage,\n        showSearchPage,\n        handleShowWelcomePage,\n        handleShowRegisterPage,\n        handleShowLoginPage,\n        handleShowUserProfilePage,\n        handleShowEditCommentPage,\n        handleShowEditCommunityPage,\n        handleShowEditPostPage\n      },\n      searchState: {\n        searchArray,\n        setSearchArray,\n        searchValue,\n        setSearchValue\n      },\n      refreshControl: {\n        setRefreshTrigger\n      },\n      loginState: {\n        login,\n        setLogin\n      },\n      userState: {\n        users,\n        setUsers,\n        user,\n        setUser,\n        storeAdmin,\n        setStoreAdmin\n      },\n      editState: {\n        listing,\n        setListing,\n        editPost,\n        setEditPost,\n        editComment,\n        setEditComment,\n        editCommunity,\n        setEditCommunity,\n        editUser,\n        setEditUser\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container page\",\n      style: {\n        display: 'flex',\n        width: '100%',\n        height: '90%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HomePageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommunityPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateCommunityPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreatePostPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateCommentPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WelcomePageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RegisterPageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UserProfilePageView, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditComment, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditCommunity, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditPost, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(Phreddit, \"0nu8JZldqmg5TSF/JF9IJBzEMvE=\");\n_c = Phreddit;\nvar _c;\n$RefreshReg$(_c, \"Phreddit\");","map":{"version":3,"names":["useState","useEffect","axios","Banner","NavBar","HomePageView","SearchPageView","CommunityPageView","PostPageView","CreatePostPageView","CreateCommunityPageView","CreateCommentPageView","arrayOfPostCommentsTime","PhredditContext","UserContext","LoginPageView","RegisterPageView","WelcomePageView","UserProfilePageView","EditComment","EditCommunity","EditPost","jsxDEV","_jsxDEV","fetchData","setPosts","setCommunities","setComments","setLinkFlairs","setUsers","postsRes","communitiesRes","commentsRes","flairsRes","usersRes","Promise","all","get","data","err","console","error","Phreddit","_s","users","posts","communities","postIDs","setPostIDs","newestPosts","setNewestPosts","oldestPosts","setOldestPosts","activePosts","setActivePosts","linkFlairs","linkFlairIDs","setLinkFlairIDs","comments","commentIDs","setCommentIDs","refreshTrigger","setRefreshTrigger","login","setLogin","editPost","setEditPost","editComment","setEditComment","editCommunity","setEditCommunity","editUser","setEditUser","listing","setListing","storeAdmin","setStoreAdmin","currentPage","setCurrentPage","handleShowHomePage","handleShowCreateCommunityPage","handleShowCreatePostPage","handleShowPostPage","handleShowCommunityPage","handleShowCreateCommentPage","handleShowSearchPage","handleShowWelcomePage","handleShowLoginPage","handleShowRegisterPage","handleShowUserProfilePage","handleShowEditCommentPage","handleShowEditPostPage","handleShowEditCommunityPage","post","setPost","showPost","views","postID","_id","community","setCommunity","showCommunityPage","comment","setComment","showCreateCommentPage","searchArray","setSearchArray","searchValue","setSearchValue","showSearchPage","input","user","setUser","length","log","map","sort","a","b","Date","postedDate","flair","activePostsSorted","postComments1","c","commentID","newestComment1","Math","max","postComments2","newestComment2","Provider","value","postState","commentState","communityState","flairState","showPageFunctions","searchState","refreshControl","loginState","userState","editState","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","display","width","height","_c","$RefreshReg$"],"sources":["/Users/nekoro/Desktop/CSE316/GitHub/Reddit-Replica/client/src/components/phreddit.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport { Banner } from './banner.js';\nimport { NavBar } from './nav.js';\nimport { HomePageView } from './homePageView.js'\nimport { SearchPageView } from './searchPageView.js'\nimport { CommunityPageView } from './communityPageView.js'\nimport { PostPageView } from './postPageView.js'\nimport { CreatePostPageView } from './createPostPageView.js'\nimport { CreateCommunityPageView } from './createCommunityPageView.js';\nimport { CreateCommentPageView } from './createCommentPageView.js';\nimport { arrayOfPostCommentsTime } from \"../helperFunctions.js\";\nimport { PhredditContext, UserContext } from \"./context\";\nimport { LoginPageView } from './loginPageView.js';\nimport { RegisterPageView } from './registerPageView.js';\nimport { WelcomePageView } from './welcomePageView.js';\nimport { UserProfilePageView } from './userProfilePageView.js';\nimport { EditComment } from './editComment.js';\nimport { EditCommunity } from './editCommunity.js';\nimport { EditPost } from './editPost.js';\n\nasync function fetchData(setPosts, setCommunities, setComments, setLinkFlairs, setUsers) {\n  try {\n    const [postsRes, communitiesRes, commentsRes, flairsRes, usersRes] = await Promise.all([\n      axios.get(\"http://127.0.0.1:8000/get/posts\"),\n      axios.get(\"http://127.0.0.1:8000/get/communities\"),\n      axios.get(\"http://127.0.0.1:8000/get/comments\"),\n      axios.get(\"http://127.0.0.1:8000/get/linkflairs\"),\n      axios.get(\"http://127.0.0.1:8000/get/users\"),\n    ]);\n\n    setPosts(postsRes.data);\n    setCommunities(communitiesRes.data);\n    setComments(commentsRes.data);\n    setLinkFlairs(flairsRes.data);\n    setUsers(usersRes.data);\n  } catch (err) {\n    console.error(\"One or more fetches failed:\", err);\n  }\n}\n\nexport default function Phreddit() {\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [communities, setCommunities] = useState([]);\n  const [postIDs, setPostIDs] = useState([]);\n  const [newestPosts, setNewestPosts] = useState([]);\n  const [oldestPosts, setOldestPosts] = useState([]);\n  const [activePosts, setActivePosts] = useState([]);\n  const [linkFlairs, setLinkFlairs] = useState([]);\n  const [linkFlairIDs, setLinkFlairIDs] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [commentIDs, setCommentIDs] = useState([]);\n  const [refreshTrigger, setRefreshTrigger] = useState(false);\n  const [login, setLogin] = useState(false);\n  const [editPost, setEditPost] = useState(null);\n  const [editComment, setEditComment] = useState(null);\n  const [editCommunity, setEditCommunity] = useState(null);\n  const [editUser, setEditUser] = useState(false);\n  const [listing, setListing] = useState('post');\n  const [storeAdmin, setStoreAdmin] = useState(null);\n\n    \n  \n\n  // Functions to switch pages\n  const [currentPage, setCurrentPage] = useState('welcome-page'); // Default page\n  const handleShowHomePage = () => setCurrentPage('home');\n  const handleShowCreateCommunityPage = () => setCurrentPage('create-community');\n  const handleShowCreatePostPage = () => setCurrentPage('create-post');\n  const handleShowPostPage = () => setCurrentPage('post');\n  const handleShowCommunityPage = () => setCurrentPage('community');\n  const handleShowCreateCommentPage = () => setCurrentPage('create-comment');\n  const handleShowSearchPage = () => setCurrentPage('search');\n  const handleShowWelcomePage = () => setCurrentPage('welcome-page')\n  const handleShowLoginPage = () => setCurrentPage('login-page')\n  const handleShowRegisterPage = () => setCurrentPage('register-page');\n  const handleShowUserProfilePage = () => setCurrentPage('user-profile');\n  const handleShowEditCommentPage = () => setCurrentPage('edit-comment');\n  const handleShowEditPostPage = () => setCurrentPage('edit-post');\n  const handleShowEditCommunityPage = () => setCurrentPage('edit-community');\n\n\n\n  // Post States\n  const[post, setPost] = useState(null);\n  const showPost = async (post) => {\n    if (!post) return;\n    post.views++;\n    // console.log(post);\n    await axios.post(\"http://127.0.0.1:8000/updateViews\", {\n      views: post.views,\n      postID: post._id\n    });\n    setPost({...post});\n    handleShowPostPage();\n  }\n\n  // Community States\n  const [community, setCommunity] = useState(null); \n  const showCommunityPage = (community) => {\n    if(!community) return;\n    setCommunity({...community});\n    handleShowCommunityPage();\n  };\n\n\n\n  // Comment States\n  const [comment, setComment] = useState(null); \n  const showCreateCommentPage = (comment, post) => {\n    if(!comment) return;\n    setPost({...post});\n    setComment({...comment});\n    handleShowCreateCommentPage();\n  };\n\n  // Search State\n  const [searchArray, setSearchArray] = useState([]); \n  const [searchValue, setSearchValue] = useState('');\n  const showSearchPage = (searchArray, input) => {\n    setSearchArray(searchArray);\n    setSearchValue(input);\n    handleShowSearchPage();\n  };\n\n  const [user, setUser] = useState(null); \n  \n\n\n  useEffect(() => {\n    fetchData(setPosts, setCommunities, setComments, setLinkFlairs, setUsers);\n  }, [refreshTrigger, currentPage]);\n  \n  useEffect(() => {\n    // Only run this once data is fetched\n    if (posts.length && comments.length && linkFlairs.length && communities.length) {\n      console.log(\"posts:\", posts);\n      console.log(\"communities:\", communities);\n      console.log(\"linkFlairs:\", linkFlairs);\n      console.log(\"comments:\", comments);\n  \n      setPostIDs(posts.map(post => post._id));\n      setNewestPosts([...posts].sort((a, b) => new Date(b.postedDate) - new Date(a.postedDate)));\n      setOldestPosts([...posts].sort((a, b) => new Date(a.postedDate) - new Date(b.postedDate)));\n      setLinkFlairIDs(linkFlairs.map(flair => flair._id));\n      setCommentIDs(comments.map(comment => comment._id));\n  \n      const activePostsSorted = [...posts].sort((a, b) => {\n        let postComments1 = arrayOfPostCommentsTime(a, comments, comments.map(c => c.commentID || c._id));\n        let newestComment1 = Math.max(...postComments1, 0);\n  \n        let postComments2 = arrayOfPostCommentsTime(b, comments, comments.map(c => c.commentID || c._id));\n        let newestComment2 = Math.max(...postComments2, 0);\n  \n        return newestComment2 - newestComment1;\n      });\n  \n      setActivePosts(activePostsSorted);\n    }\n  }, [posts, comments, linkFlairs, communities]);\n  \n  return (\n    <PhredditContext.Provider value={{\n      postState: {\n        posts, \n        setPosts, \n        postIDs, \n        newestPosts, \n        oldestPosts, \n        activePosts, \n        post, setPost, \n        setActivePosts, \n        setOldestPosts, \n        setNewestPosts, \n        setPostIDs },\n      commentState: {comments, setComments, commentIDs, comment, setComment, setCommentIDs},\n      communityState: {communities, setCommunities, community, setCommunity},\n      flairState: {linkFlairs, linkFlairIDs, setLinkFlairs, setLinkFlairIDs},\n      showPageFunctions: {\n        currentPage, \n        setCurrentPage, \n        handleShowHomePage, \n        handleShowCreateCommunityPage, \n        handleShowCreatePostPage, \n        handleShowPostPage, \n        showPost, \n        showCreateCommentPage, \n        showCommunityPage, \n        showSearchPage, \n        handleShowWelcomePage, \n        handleShowRegisterPage, \n        handleShowLoginPage,\n        handleShowUserProfilePage,\n        handleShowEditCommentPage,\n        handleShowEditCommunityPage,\n        handleShowEditPostPage\n      },\n      searchState: {searchArray, setSearchArray, searchValue, setSearchValue},\n      refreshControl: { setRefreshTrigger },\n      loginState: {login, setLogin},\n      userState: {users, setUsers, user, setUser, storeAdmin, setStoreAdmin},\n      editState: {listing, setListing, editPost, setEditPost, editComment, setEditComment, editCommunity, setEditCommunity, editUser, setEditUser}\n    }}>\n      <Banner />\n      <div className=\"container page\" style={{display: 'flex',  width: '100%', height: '90%'}}>\n        <NavBar />\n        <HomePageView />\n        <SearchPageView />\n        <CommunityPageView />\n        <CreateCommunityPageView/>\n        <PostPageView />\n        <CreatePostPageView />\n        <CreateCommentPageView />\n        <WelcomePageView />\n        <LoginPageView/>\n        <RegisterPageView/>\n        <UserProfilePageView/>\n        <EditComment/>\n        <EditCommunity/>\n        <EditPost/>\n      </div>\n    </PhredditContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}